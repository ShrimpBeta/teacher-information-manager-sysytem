# 教改项目
type EduReform {
  id: ID!
  teachersIn: [UserExport]!
  teachersOut: [String]
  number: String!
  title: String!
  startDate: Time
  duration: String
  level: String
  rank: String
  achievement: String
  fund: String
  createdAt: Time!
  updatedAt: Time!
}

type EduReformQuery {
  totalCount: Int!
  eduReforms: [EduReform]!
}

type EduReformPreview {
  teachersIn: [UserExport]
  teachersOut: [String]
  number: String
  title: String
  startDate: Time
  duration: String
  level: String
  rank: String
  achievement: String
  fund: String
}

input EduReformData {
  teachersIn: [ID]!
  teachersOut: [String]
  number: String!
  title: String!
  startDate: Time
  duration: String
  level: String
  rank: String
  achievement: String
  fund: String
}

input EduReformFilter {
  teachersIn: [ID]!
  teachersOut: [String]
  number: String
  title: String
  startDateStart: Time
  startDateEnd: Time
  level: String
  rank: String
  achievement: String
  fund: String
  createdStart: Time
  createdEnd: Time
  updatedStart: Time
  updatedEnd: Time
}

extend type Query {
  eduReform(id: ID!): EduReform!

  eduReformsByFilter(filter: EduReformFilter!): EduReformQuery!
  eduReforms(ids: [ID]!): [EduReform]!
}

extend type Mutation {
  createEduReform(eduReformData: EduReformData!): EduReform!
  updateEduReform(id: ID!, eduReformData: EduReformData!): EduReform!
  deleteEduReform(id: ID!): EduReform!

  uploadEduReforms(file: Upload!): [EduReformPreview]!
}
