package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"
	graphql_models "server/graph/model"

	"github.com/99designs/gqlgen/graphql"
)

// CreatePassword is the resolver for the createPassword field.
func (r *mutationResolver) CreatePassword(ctx context.Context, userID string, newPasswordData graphql_models.PasswordData) (*graphql_models.Password, error) {
	return r.PasswordService.CreatePassword(userID, newPasswordData)
}

// UpdatePassword is the resolver for the updatePassword field.
func (r *mutationResolver) UpdatePassword(ctx context.Context, id string, passwordData graphql_models.PasswordData) (*graphql_models.Password, error) {
	return r.PasswordService.UpdatePassword(id, passwordData)
}

// DeletePassword is the resolver for the deletePassword field.
func (r *mutationResolver) DeletePassword(ctx context.Context, id string) (*graphql_models.Password, error) {
	return r.PasswordService.DeletePassword(id)
}

// UploadPasswords is the resolver for the uploadPasswords field.
func (r *mutationResolver) UploadPasswords(ctx context.Context, file graphql.Upload) ([]*graphql_models.Password, error) {
	panic(fmt.Errorf("not implemented: UploadPasswords - uploadPasswords"))
}

// CreatedPasswords is the resolver for the createdPasswords field.
func (r *mutationResolver) CreatedPasswords(ctx context.Context, userID string, newPasswordDatas []*graphql_models.PasswordData) ([]*graphql_models.Password, error) {
	panic(fmt.Errorf("not implemented: CreatedPasswords - createdPasswords"))
}

// Password is the resolver for the password field.
func (r *queryResolver) Password(ctx context.Context, id string) (*graphql_models.Password, error) {
	return r.PasswordService.GetPasswordById(id)
}

// PasswordTrue is the resolver for the passwordTrue field.
func (r *queryResolver) PasswordTrue(ctx context.Context, id string) (*graphql_models.Password, error) {
	panic(fmt.Errorf("not implemented: PasswordTrue - passwordTrue"))
}

// PasswordsByFilter is the resolver for the passwordsByFilter field.
func (r *queryResolver) PasswordsByFilter(ctx context.Context, filter graphql_models.PasswordFilter) ([]*graphql_models.Password, error) {
	panic(fmt.Errorf("not implemented: PasswordsByFilter - passwordsByFilter"))
}
