package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"encoding/hex"
	"fmt"
	"io"
	"os"
	graphql_models "server/graph/model"
	"server/middlewares"
	dataextraction "server/services/dataExtraction"
	"server/services/excel"
	"server/services/ocr"
	"server/services/pdf"

	"github.com/99designs/gqlgen/graphql"
)

// CreateSciResearch is the resolver for the createSciResearch field.
func (r *mutationResolver) CreateSciResearch(ctx context.Context, sciResearchData graphql_models.SciResearchData) (*graphql_models.SciResearch, error) {
	ginContext, err := middlewares.GinContextFromContext(ctx)
	if err != nil {
		return nil, err
	}

	account, err := middlewares.ForContext(ginContext)
	if err != nil {
		return nil, err
	}

	user, err := r.UserService.Repo.GetUserByEmail(account.Account)
	if err != nil {
		return nil, err
	}

	return r.SciResearchService.CreateSciResearch(user.ID, sciResearchData, r.UserService.Repo)
}

// UpdateSciResearch is the resolver for the updateSciResearch field.
func (r *mutationResolver) UpdateSciResearch(ctx context.Context, id string, sciResearchData graphql_models.SciResearchData) (*graphql_models.SciResearch, error) {
	ginContext, err := middlewares.GinContextFromContext(ctx)
	if err != nil {
		return nil, err
	}

	account, err := middlewares.ForContext(ginContext)
	if err != nil {
		return nil, err
	}

	user, err := r.UserService.Repo.GetUserByEmail(account.Account)
	if err != nil {
		return nil, err
	}

	return r.SciResearchService.UpdateSciResearch(id, user.ID, sciResearchData, r.UserService.Repo)
}

// DeleteSciResearch is the resolver for the deleteSciResearch field.
func (r *mutationResolver) DeleteSciResearch(ctx context.Context, id string) (*graphql_models.SciResearch, error) {
	ginContext, err := middlewares.GinContextFromContext(ctx)
	if err != nil {
		return nil, err
	}

	// if no token found, return an error
	account, err := middlewares.ForContext(ginContext)
	if err != nil {
		return nil, err
	}

	user, err := r.UserService.Repo.GetUserByEmail(account.Account)
	if err != nil {
		return nil, err
	}

	return r.SciResearchService.DeleteSciResearch(user.ID, id, r.UserService.Repo)
}

// UploadSciResearchs is the resolver for the uploadSciResearchs field.
func (r *mutationResolver) UploadSciResearchs(ctx context.Context, file graphql.Upload) ([]*graphql_models.SciResearchPreview, error) {
	ginContext, err := middlewares.GinContextFromContext(ctx)
	if err != nil {
		return nil, err
	}

	_, err = middlewares.ForContext(ginContext)
	if err != nil {
		return nil, err
	}
	users, err := r.UserService.GetUserExports()
	if err != nil {
		return nil, err
	}

	if file.ContentType == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" {
		fileBytes, err := io.ReadAll(file.File)
		if err != nil {
			return nil, err
		}
		return excel.ConvertToSciResearch(fileBytes, users)
	} else if file.ContentType == "application/pdf" {
		fileName := hex.EncodeToString([]byte(file.Filename))
		filePath := "temp/" + fileName + ".pdf"
		fileBytes, err := io.ReadAll(file.File)
		if err != nil {
			return nil, err
		}
		err = os.WriteFile(filePath, fileBytes, 0644)
		if err != nil {
			return nil, err
		}
		Strings, err := pdf.GetPlainTextFormPdf(filePath)
		// delete the file
		oserr := os.Remove(filePath)
		if oserr != nil {
			return nil, oserr
		}
		if err != nil {
			return nil, err
		}
		sciResearchPreview, err := dataextraction.StringToSciResearch(Strings, users)
		if err != nil {
			return nil, err
		}
		return []*graphql_models.SciResearchPreview{&sciResearchPreview}, nil
	} else if file.ContentType == "image/png" {
		fileName := hex.EncodeToString([]byte(file.Filename))
		filePath := "temp/" + fileName + ".png"
		fileBytes, err := io.ReadAll(file.File)
		if err != nil {
			return nil, err
		}
		err = os.WriteFile(filePath, fileBytes, 0644)
		if err != nil {
			return nil, err
		}
		Strings, err := ocr.GetTextFormImage(filePath)
		// delete the file
		oserr := os.Remove(filePath)
		if oserr != nil {
			return nil, oserr
		}
		if err != nil {
			return nil, err
		}
		sciResearchPreview, err := dataextraction.StringToSciResearch(Strings, users)
		if err != nil {
			return nil, err
		}
		return []*graphql_models.SciResearchPreview{&sciResearchPreview}, nil
	} else if file.ContentType == "image/jpeg" {
		fileName := hex.EncodeToString([]byte(file.Filename))
		filePath := "temp/" + fileName + ".jpeg"
		fileBytes, err := io.ReadAll(file.File)
		if err != nil {
			return nil, err
		}
		err = os.WriteFile(filePath, fileBytes, 0644)
		if err != nil {
			return nil, err
		}
		Strings, err := ocr.GetTextFormImage(filePath)
		// delete the file
		oserr := os.Remove(filePath)
		if oserr != nil {
			return nil, oserr
		}
		if err != nil {
			return nil, err
		}
		sciResearchPreview, err := dataextraction.StringToSciResearch(Strings, users)
		if err != nil {
			return nil, err
		}
		return []*graphql_models.SciResearchPreview{&sciResearchPreview}, nil
	} else {
		return nil, fmt.Errorf("invalid file type")
	}
}

// SciResearch is the resolver for the sciResearch field.
func (r *queryResolver) SciResearch(ctx context.Context, id string) (*graphql_models.SciResearch, error) {
	ginContext, err := middlewares.GinContextFromContext(ctx)
	if err != nil {
		return nil, err
	}

	// if no token found, return an error
	account, err := middlewares.ForContext(ginContext)
	if err != nil {
		return nil, err
	}

	user, err := r.UserService.Repo.GetUserByEmail(account.Account)
	if err != nil {
		return nil, err
	}

	return r.SciResearchService.GetSciResearchById(user.ID, id, r.UserService.Repo)
}

// SciResearchsByFilter is the resolver for the sciResearchsByFilter field.
func (r *queryResolver) SciResearchsByFilter(ctx context.Context, filter graphql_models.SciResearchFilter, offset int, limit int) (*graphql_models.SciResearchQuery, error) {
	ginContext, err := middlewares.GinContextFromContext(ctx)
	if err != nil {
		return nil, err
	}

	account, err := middlewares.ForContext(ginContext)
	if err != nil {
		return nil, err
	}

	user, err := r.UserService.Repo.GetUserByEmail(account.Account)
	if err != nil {
		return nil, err
	}

	return r.SciResearchService.GetSciResearchsByFilter(user.ID, filter, r.UserService.Repo, offset, limit)
}
