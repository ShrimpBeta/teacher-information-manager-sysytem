package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"io"
	graphql_models "server/graph/model"
	"server/middlewares"
	"server/services/excel"

	"github.com/99designs/gqlgen/graphql"
)

// CreateMonograph is the resolver for the createMonograph field.
func (r *mutationResolver) CreateMonograph(ctx context.Context, monographData graphql_models.MonographData) (*graphql_models.Monograph, error) {
	ginContext, err := middlewares.GinContextFromContext(ctx)
	if err != nil {
		return nil, err
	}

	account, err := middlewares.ForContext(ginContext)
	if err != nil {
		return nil, err
	}

	user, err := r.UserService.Repo.GetUserByEmail(account.Account)
	if err != nil {
		return nil, err
	}

	return r.MonographService.CreateMonograph(user.ID, monographData, r.UserService.Repo)
}

// UpdateMonograph is the resolver for the updateMonograph field.
func (r *mutationResolver) UpdateMonograph(ctx context.Context, id string, monographData graphql_models.MonographData) (*graphql_models.Monograph, error) {
	ginContext, err := middlewares.GinContextFromContext(ctx)
	if err != nil {
		return nil, err
	}

	account, err := middlewares.ForContext(ginContext)
	if err != nil {
		return nil, err
	}

	user, err := r.UserService.Repo.GetUserByEmail(account.Account)
	if err != nil {
		return nil, err
	}

	return r.MonographService.UpdateMonograph(id, user.ID, monographData, r.UserService.Repo)
}

// DeleteMonograph is the resolver for the deleteMonograph field.
func (r *mutationResolver) DeleteMonograph(ctx context.Context, id string) (*graphql_models.Monograph, error) {
	ginContext, err := middlewares.GinContextFromContext(ctx)
	if err != nil {
		return nil, err
	}

	// if no token found, return an error
	account, err := middlewares.ForContext(ginContext)
	if err != nil {
		return nil, err
	}

	user, err := r.UserService.Repo.GetUserByEmail(account.Account)
	if err != nil {
		return nil, err
	}

	return r.MonographService.DeleteMonograph(user.ID, id, r.UserService.Repo)
}

// UploadMonographs is the resolver for the uploadMonographs field.
func (r *mutationResolver) UploadMonographs(ctx context.Context, file graphql.Upload) ([]*graphql_models.MonographPreview, error) {
	ginContext, err := middlewares.GinContextFromContext(ctx)
	if err != nil {
		return nil, err
	}

	_, err = middlewares.ForContext(ginContext)
	if err != nil {
		return nil, err
	}

	if file.ContentType == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" {
		fileBytes, err := io.ReadAll(file.File)
		if err != nil {
			return nil, err
		}
		users, err := r.UserService.GetUserExports()
		if err != nil {
			return nil, err
		}
		return excel.ConvertToMonograph(fileBytes, users)
	} else {
		return nil, nil
	}
}

// Monograph is the resolver for the monograph field.
func (r *queryResolver) Monograph(ctx context.Context, id string) (*graphql_models.Monograph, error) {
	ginContext, err := middlewares.GinContextFromContext(ctx)
	if err != nil {
		return nil, err
	}

	// if no token found, return an error
	account, err := middlewares.ForContext(ginContext)
	if err != nil {
		return nil, err
	}

	user, err := r.UserService.Repo.GetUserByEmail(account.Account)
	if err != nil {
		return nil, err
	}

	return r.MonographService.GetMonographById(user.ID, id, r.UserService.Repo)
}

// MonographsByFilter is the resolver for the monographsByFilter field.
func (r *queryResolver) MonographsByFilter(ctx context.Context, filter graphql_models.MonographFilter, offset int, limit int) (*graphql_models.MonographQuery, error) {
	ginContext, err := middlewares.GinContextFromContext(ctx)
	if err != nil {
		return nil, err
	}

	account, err := middlewares.ForContext(ginContext)
	if err != nil {
		return nil, err
	}

	user, err := r.UserService.Repo.GetUserByEmail(account.Account)
	if err != nil {
		return nil, err
	}

	return r.MonographService.GetMonographsByFilter(user.ID, filter, r.UserService.Repo, offset, limit)
}
