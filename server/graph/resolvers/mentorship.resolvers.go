package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"encoding/hex"
	"fmt"
	"io"
	"os"
	graphql_models "server/graph/model"
	"server/middlewares"
	dataextraction "server/services/dataExtraction"
	"server/services/excel"
	"server/services/ocr"
	"server/services/pdf"

	"github.com/99designs/gqlgen/graphql"
)

// CreateMentorship is the resolver for the createMentorship field.
func (r *mutationResolver) CreateMentorship(ctx context.Context, mentorshipData graphql_models.MentorshipData) (*graphql_models.Mentorship, error) {
	ginContext, err := middlewares.GinContextFromContext(ctx)
	if err != nil {
		return nil, err
	}

	account, err := middlewares.ForContext(ginContext)
	if err != nil {
		return nil, err
	}

	user, err := r.UserService.Repo.GetUserByEmail(account.Account)
	if err != nil {
		return nil, err
	}

	return r.MentorshipService.CreateMentorship(user.ID, mentorshipData)
}

// UpdateMentorship is the resolver for the updateMentorship field.
func (r *mutationResolver) UpdateMentorship(ctx context.Context, id string, mentorshipData graphql_models.MentorshipData) (*graphql_models.Mentorship, error) {
	ginContext, err := middlewares.GinContextFromContext(ctx)
	if err != nil {
		return nil, err
	}

	// if no token found, return an error
	account, err := middlewares.ForContext(ginContext)
	if err != nil {
		return nil, err
	}

	user, err := r.UserService.Repo.GetUserByEmail(account.Account)
	if err != nil {
		return nil, err
	}

	return r.MentorshipService.UpdateMentorship(user.ID, id, mentorshipData)
}

// DeleteMentorship is the resolver for the deleteMentorship field.
func (r *mutationResolver) DeleteMentorship(ctx context.Context, id string) (*graphql_models.Mentorship, error) {
	ginContext, err := middlewares.GinContextFromContext(ctx)
	if err != nil {
		return nil, err
	}

	// if no token found, return an error
	account, err := middlewares.ForContext(ginContext)
	if err != nil {
		return nil, err
	}

	user, err := r.UserService.Repo.GetUserByEmail(account.Account)
	if err != nil {
		return nil, err
	}

	return r.MentorshipService.DeleteMentorship(user.ID, id)
}

// UploadMentorships is the resolver for the uploadMentorships field.
func (r *mutationResolver) UploadMentorships(ctx context.Context, file graphql.Upload) ([]*graphql_models.MentorshipPreview, error) {
	ginContext, err := middlewares.GinContextFromContext(ctx)
	if err != nil {
		return nil, err
	}

	_, err = middlewares.ForContext(ginContext)
	if err != nil {
		return nil, err
	}

	if file.ContentType == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" {
		fileBytes, err := io.ReadAll(file.File)
		if err != nil {
			return nil, err
		}
		return excel.ConvertToMentorship(fileBytes)
	} else if file.ContentType == "application/pdf" {
		fileName := hex.EncodeToString([]byte(file.Filename))
		filePath := "temp/" + fileName + ".pdf"
		fileBytes, err := io.ReadAll(file.File)
		if err != nil {
			return nil, err
		}
		err = os.WriteFile(filePath, fileBytes, 0644)
		if err != nil {
			return nil, err
		}
		Strings, err := pdf.GetPlainTextFormPdf(filePath)
		// delete the file
		oserr := os.Remove(filePath)
		if oserr != nil {
			return nil, oserr
		}
		if err != nil {
			return nil, err
		}
		mentorshipPreview, err := dataextraction.StringToMentorship(Strings)
		if err != nil {
			return nil, err
		}
		return []*graphql_models.MentorshipPreview{&mentorshipPreview}, nil
	} else if file.ContentType == "image/png" {
		fileName := hex.EncodeToString([]byte(file.Filename))
		filePath := "temp/" + fileName + ".png"
		fileBytes, err := io.ReadAll(file.File)
		if err != nil {
			return nil, err
		}
		err = os.WriteFile(filePath, fileBytes, 0644)
		if err != nil {
			return nil, err
		}
		Strings, err := ocr.GetTextFormImage(filePath)
		// delete the file
		oserr := os.Remove(filePath)
		if oserr != nil {
			return nil, oserr
		}
		if err != nil {
			return nil, err
		}
		mentorshipPreview, err := dataextraction.StringToMentorship(Strings)
		if err != nil {
			return nil, err
		}
		return []*graphql_models.MentorshipPreview{&mentorshipPreview}, nil
	} else if file.ContentType == "image/jpeg" {
		fileName := hex.EncodeToString([]byte(file.Filename))
		filePath := "temp/" + fileName + ".jpeg"
		fileBytes, err := io.ReadAll(file.File)
		if err != nil {
			return nil, err
		}
		err = os.WriteFile(filePath, fileBytes, 0644)
		if err != nil {
			return nil, err
		}
		Strings, err := ocr.GetTextFormImage(filePath)
		// delete the file
		oserr := os.Remove(filePath)
		if oserr != nil {
			return nil, oserr
		}
		if err != nil {
			return nil, err
		}
		mentorshipPreview, err := dataextraction.StringToMentorship(Strings)
		if err != nil {
			return nil, err
		}
		return []*graphql_models.MentorshipPreview{&mentorshipPreview}, nil
	} else {
		return nil, fmt.Errorf("invalid file type")
	}
}

// Mentorship is the resolver for the mentorship field.
func (r *queryResolver) Mentorship(ctx context.Context, id string) (*graphql_models.Mentorship, error) {
	ginContext, err := middlewares.GinContextFromContext(ctx)
	if err != nil {
		return nil, err
	}

	// if no token found, return an error
	account, err := middlewares.ForContext(ginContext)
	if err != nil {
		return nil, err
	}

	user, err := r.UserService.Repo.GetUserByEmail(account.Account)
	if err != nil {
		return nil, err
	}

	return r.MentorshipService.GetMentorshipById(user.ID, id)
}

// MentorshipsByFilter is the resolver for the mentorshipsByFilter field.
func (r *queryResolver) MentorshipsByFilter(ctx context.Context, filter graphql_models.MentorshipFilter, offset int, limit int) (*graphql_models.MentorshipQuery, error) {
	ginContext, err := middlewares.GinContextFromContext(ctx)
	if err != nil {
		return nil, err
	}

	account, err := middlewares.ForContext(ginContext)
	if err != nil {
		return nil, err
	}

	user, err := r.UserService.Repo.GetUserByEmail(account.Account)
	if err != nil {
		return nil, err
	}

	return r.MentorshipService.GetMentorshipsByFilter(user.ID, filter, offset, limit)
}
