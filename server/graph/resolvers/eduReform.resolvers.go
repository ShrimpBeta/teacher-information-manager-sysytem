package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"
	graphql_models "server/graph/model"
	"server/middlewares"

	"github.com/99designs/gqlgen/graphql"
)

// CreateEduReform is the resolver for the createEduReform field.
func (r *mutationResolver) CreateEduReform(ctx context.Context, eduReformData graphql_models.EduReformData) (*graphql_models.EduReform, error) {
	ginContext, err := middlewares.GinContextFromContext(ctx)
	if err != nil {
		return nil, err
	}

	account, err := middlewares.ForContext(ginContext)
	if err != nil {
		return nil, err
	}

	user, err := r.UserService.Repo.GetUserByEmail(account.Account)
	if err != nil {
		return nil, err
	}

	return r.EduReformService.CreateEduReform(user.ID, eduReformData, r.UserService.Repo)
}

// UpdateEduReform is the resolver for the updateEduReform field.
func (r *mutationResolver) UpdateEduReform(ctx context.Context, id string, eduReformData graphql_models.EduReformData) (*graphql_models.EduReform, error) {
	ginContext, err := middlewares.GinContextFromContext(ctx)
	if err != nil {
		return nil, err
	}

	account, err := middlewares.ForContext(ginContext)
	if err != nil {
		return nil, err
	}

	user, err := r.UserService.Repo.GetUserByEmail(account.Account)
	if err != nil {
		return nil, err
	}

	return r.EduReformService.UpdateEduReform(id, user.ID, eduReformData, r.UserService.Repo)
}

// DeleteEduReform is the resolver for the deleteEduReform field.
func (r *mutationResolver) DeleteEduReform(ctx context.Context, id string) (*graphql_models.EduReform, error) {
	ginContext, err := middlewares.GinContextFromContext(ctx)
	if err != nil {
		return nil, err
	}

	_, err = middlewares.ForContext(ginContext)
	if err != nil {
		return nil, err
	}

	return r.EduReformService.DeleteEduReform(id, r.UserService.Repo)
}

// UploadEduReforms is the resolver for the uploadEduReforms field.
func (r *mutationResolver) UploadEduReforms(ctx context.Context, file graphql.Upload) ([]*graphql_models.EduReformPreview, error) {
	ginContext, err := middlewares.GinContextFromContext(ctx)
	if err != nil {
		return nil, err
	}

	_, err = middlewares.ForContext(ginContext)
	if err != nil {
		return nil, err
	}

	panic(fmt.Errorf("not implemented: UploadEduReforms - uploadEduReforms"))
}

// EduReform is the resolver for the eduReform field.
func (r *queryResolver) EduReform(ctx context.Context, id string) (*graphql_models.EduReform, error) {
	ginContext, err := middlewares.GinContextFromContext(ctx)
	if err != nil {
		return nil, err
	}

	_, err = middlewares.ForContext(ginContext)
	if err != nil {
		return nil, err
	}

	return r.EduReformService.GetEduReformById(id, r.UserService.Repo)
}

// EduReformsByFilter is the resolver for the eduReformsByFilter field.
func (r *queryResolver) EduReformsByFilter(ctx context.Context, filter graphql_models.EduReformFilter, offset int, limit int) (*graphql_models.EduReformQuery, error) {
	ginContext, err := middlewares.GinContextFromContext(ctx)
	if err != nil {
		return nil, err
	}

	account, err := middlewares.ForContext(ginContext)
	if err != nil {
		return nil, err
	}

	user, err := r.UserService.Repo.GetUserByEmail(account.Account)
	if err != nil {
		return nil, err
	}

	return r.EduReformService.GetEduReformsByFilter(user.ID, filter, r.UserService.Repo, offset, limit)
}

// EduReforms is the resolver for the eduReforms field.
func (r *queryResolver) EduReforms(ctx context.Context, ids []*string) ([]*graphql_models.EduReform, error) {
	panic(fmt.Errorf("not implemented: EduReforms - eduReforms"))
}
