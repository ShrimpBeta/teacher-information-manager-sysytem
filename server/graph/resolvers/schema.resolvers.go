package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"
	"server/graph"
	graphql_models "server/graph/model"
	"server/persistence/models"
	"server/persistence/repository"
	"server/services/avatar"
	passwordencrypt "server/services/passwordEncrypt"
)

// CreateAccount is the resolver for the createAccount field.
func (r *mutationResolver) CreateAccount(ctx context.Context, newUserData graphql_models.NewUser) (*graphql_models.UserCreate, error) {
	masterKey, err := passwordencrypt.GenerateMasterKey()
	if err != nil {
		return nil, err
	}

	avatar, err := avatar.GenerateAvatar(newUserData.Email)
	if err != nil {
		return nil, err
	}

	newUser := models.User{
		Username:  "Unknown",
		Email:     newUserData.Email,
		Password:  newUserData.Password,
		Avatar:    avatar,
		Activate:  false,
		MasterKey: masterKey,
		Salt:      passwordencrypt.GenerateSalt(),
	}
	_, err = repository.Repos.UserRepo.CreateUser(&newUser)
	if err != nil {
		return nil, err
	}
	return &graphql_models.UserCreate{
		Email:    newUser.Email,
		Password: newUser.Password,
	}, nil
}

// AdminSignIn is the resolver for the adminSignIn field.
func (r *queryResolver) AdminSignIn(ctx context.Context, adminSignInInput *graphql_models.AdminSignInInput) (*graphql_models.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: AdminSignIn - adminSignIn"))
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
